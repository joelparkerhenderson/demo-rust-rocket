[package]
name = "demo-rust-rocket"
version = "1.0.0"
edition = "2021"
authors = ["Joel Parker Henderson <joel@joelparkerhenderson.com>"]
license = "GPL-2.0 OR GPL-3.0"
homepage = "https://github.com/joelparkerhenderson/demo-rust-rocket"
repository = "https://github.com/joelparkerhenderson/demo-rust-rocket"
documentation = "https://github.com/joelparkerhenderson/demo-rust-rocket"

description = """
Demo of Rust and Rocket.
"""

readme = "README.md"
keywords = ["demo", "rust", "rocket", "web"]
categories = ["web-programming"]

[dependencies]

### Dependencies for this demo_rust_rocket program

rocket = { version = "0.5.0", features = ["http2", "json", "msgpack", "uuid", "secrets", "tls", "mtls"] }
rocket_dyn_templates = { version = "0.1.0", features = ["handlebars", "tera"] }
rocket_sync_db_pools = "*"
rocket_db_pools = { version = "0.1.0", features = ["sqlx_sqlite"] }

# Serde: a framework for serializing and deserializing Rust data structures. 
# The Serde crate has core APIs, including Serialize and Deserialize traits. 
#
# The "derive" feature is only required when using #[derive(Serialize, Deserialize)]
# to make Serde work with structs and enums defined in your crate.
#
# The `serde_derive` version must match the serde dependency version.
# In practice, all the serde-related crates must match the same version,
# so it is prudent to define each version to be greater-than a version,
# or even better, to pin to specific versions.
#
serde = { version = "^1.0.103", features = ["derive"] }
serde_derive = "^1.0.103"
serde_json = "^1.0.44"

### Other dependencies that we like to use with many of our Rocket programs

# Library for validation of RS256 JWTs.
#
#alcoholic_jwt = "1.0.0"

# Chrono: Date and Time for Rust
#
# Chrono currently uses the time crate, such as for Duration.
# This will change when Chrono is upgraded to use Rust std time.
#
#chrono = { version = "0.4.10", features = ["serde"] }
#time = "*"

# Diesel: A safe, extensible ORM and Query Builder for Rust.
#
#   * chrono: for time data types
#   * network-address: for IP address data types
#   * numeric: for numeric data types, such as decimals
#   * postgres: for PostgreSQL databases
#   * sqlite: for SQLite databases
#   * r2d2: for Rust connection pooling optimizations
#   * serde_json: for JSON data types
#   * uuid: for UUID data types
#
# If the diesel version number changes, be sure to verify that
# any dependency versions are correct. The crate `bigdecimal`
# version number must match the diesel `bigdecimal` version.
#
#diesel = { version = "1.4.4", features = ["chrono", "network-address", "numeric", "postgres", "sqlite", "r2d2", "serde_json", "url", "uuid"] }
#diesel-dynamic-schema = { git = "https://github.com/diesel-rs/diesel-dynamic-schema" }

# dotenv: dotfiles for environment variables
#
#dotenv = "^0.15.0"

# jsonwebtoken: JSON web token for proving credentials
#
# jsonwebtoken = "^6.0.1"

# SQLlite library. 
# We use this for testing.
#
#libsqlite3-sys = { version = "*", features = ["bundled"] }

# A lightweight logging facade for Rust.
#
#log = "*"

# FFI bindings to OpenSSL.
#
#openssl-sys = "*"

# Needed for Postgres.
#
#openssl = "*"

# r2d2: database connection pool
#
# Version must match the diesel dependency version
#
#r2d2 = "^0.8.4"
#r2d2-diesel = "^1.0"

# rand: random number generator
#
#rand = "^0.7.2"

# Reqeust: higher level HTTP client library.
#
# Features:
#
#   * default-tls (enabled by default): Provides TLS support to connect over HTTPS.
#   * native-tls: Enables TLS functionality provided by native-tls.
#   * native-tls-vendored: Enables the vendored feature of native-tls.
#   * rustls-tls: Enables TLS functionality provided by rustls.
#   * blocking: Provides the blocking client API.
#   * cookies: Provides cookie session support.
#   * gzip: Provides response body gzip decompression.
#   * brotli: Provides response body brotli decompression.
#   * json: Provides serialization and deserialization for JSON bodies.
#   * stream: Adds support for futures::Stream.
#   * socks: Provides SOCKS5 proxy support.
#   * trust-dns: Enables a trust-dns async resolver instead of default threadpool using getaddrinfo.
#
#reqwest = { version = "*", features = ["blocking", "cookies", "default-tls", "json", "stream"] }

# rocket: web framework
#rocket_cors = { version = "^0.5.1", default-features = false }

# rust-crypto: rust cryptography
#rust-crypto = "^0.2.36"

# slug: TODO
#slug = "^0.1.4"

# validator: TODO
#validator = "^0.10.0"
#validator_derive = "^0.10.0"

# uuid: Generate and parse UUIDs.
#
# Version must match the diesel dependency version
#
#   * v1 - adds the Uuid::new_v1 function and the ability to create a V1 using an implementation of uuid::v1::ClockSequence (usually uuid::v1::Context) and a timestamp from time::timespec.
#   * v3 - adds the Uuid::new_v3 function and the ability to create a V3 UUID based on the MD5 hash of some data.
#   * v4 - adds the Uuid::new_v4 function and the ability to randomly generate a Uuid.
#   * v5 - adds the Uuid::new_v5 function and the ability to create a V5 UUID based on the SHA1 hash of some data.
#   * serde - adds the ability to serialize and deserialize a Uuid using the serde crate.
#
# You need to enable one of the following Cargo features together with v3, v4 or v5 feature if you're targeting wasm32 architecture:
#
#   * stdweb - enables support for OsRng on wasm32-unknown-unknown via stdweb combined with cargo-web
#   * wasm-bindgen - wasm-bindgen enables support for OsRng on wasm32-unknown-unknown via wasm-bindgen
#
#uuid = { version = "= 0.8.1", features = ["serde", "v1", "v3", "v4", "v5"] }
